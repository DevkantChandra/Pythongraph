# -*- coding: utf-8 -*-
"""Graph and Charts.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Usy0ugtPnYMktaGRW4VFzQxDVjmiiJNe
"""

import numpy as np
import matplotlib.pyplot as plt

# Generate some data
x = np.array([1, 2, 3, 4, 5, 6])
y = np.power(x, 3)

# Use the plot() function to create a line chart
plt.plot(x, y)

# Display the plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Generate x values using linspace
x = np.linspace(0, 10, 1000)

# Compute y values as the sine of x
y = np.sin(x)

# Use the plot() function to create a line chart
plt.plot(x, y)

# Display the plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

# Reset Matplotlib settings to default
mpl.rcParams.update(mpl.rcParamsDefault)

# Generate x values using linspace
x = np.linspace(0, 10, 1000)

# Compute y values as the sine of x
y = np.sin(x)

# Use the plot() function to create a line chart
plt.plot(x, y)

# Display the plot
plt.show()

# Commented out IPython magic to ensure Python compatibility.
plt.style.use('seaborn-darkgrid')
# %matplotlib inline
plt.figure(figsize=(10, 5))

x = np.linspace(0, 10, 1000)
y = np.sin(x)

plt.plot(x, y)
plt.show()

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

# Set the size of the figure
plt.figure(figsize=(10, 5))

# Generate x values
x = np.linspace(0, 10, 1000)
# Compute y values as the sine of x
y = np.sin(x)

# Plot the sine graph with a solid blue line
plt.plot(x, y, 'b-')

# Add labels to the axes
plt.xlabel("X - Axis")
plt.ylabel("Y - Axis")

# Display the plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

# Set the size of the figure
plt.figure(figsize=(10, 5))

# Generate x values
x = np.linspace(0, 10, 1000)
# Compute y values as the sine of x
y = np.sin(x)

# Plot the sine graph with a solid red line
plt.plot(x, y, 'r-')

# Add labels to the axes
plt.xlabel("X - Axis")
plt.ylabel("Y - Axis")

# Display the plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

# Set the size of the figure
plt.figure(figsize=(10, 5))

# Generate x values
x = np.linspace(0, 10, 40)
# Compute y values as the sine of x
y = np.sin(x)

# Plot the sine graph with green dots
plt.plot(x, y, 'go')

# Add labels to the axes
plt.xlabel("X - Axis")
plt.ylabel("Y - Axis")

# Display the plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

# Set the size of the figure
plt.figure(figsize=(10, 5))

# Generate x values
x = np.linspace(0, 10, 40)
# Compute y values as the sine of x
y = np.sin(x)

# Plot the sine graph with red dots
plt.plot(x, y, 'ro')

# Add labels to the axes
plt.xlabel("X - Axis")
plt.ylabel("Y - Axis")

# Display the plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

# Set the size of the figure
plt.figure(figsize=(10, 5))

# Generate x values
x = np.linspace(0, 10, 40)
# Compute y values as the sine of x
y = np.sin(x)

# Plot the sine graph with red triangular markers
plt.plot(x, y, 'r^')

# Add labels to the axes
plt.xlabel("X - Axis")
plt.ylabel("Y - Axis")

# Display the plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

# Set the size of the figure
plt.figure(figsize=(10, 5))

# Generate x values
x = np.linspace(0, 10, 40)
# Compute y values as the sine of x
y = np.sin(x)

# Plot the sine graph with red inverted triangular markers
plt.plot(x, y, 'rv')

# Add labels to the axes
plt.xlabel("X - Axis")
plt.ylabel("Y - Axis")

# Display the plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

# Set the size of the figure
plt.figure(figsize=(10, 5))

# Generate x values
x = np.array([1, 2, 3, 4, 5, 6])
y1 = np.power(x, 2)
y2 = np.power(x, 3)

# Plot the first set of data (blue line) and add legend
plt.plot(x, y1, "b-", label='$y_1 = x^2$')

# Plot the second set of data (red line) and add legend
plt.plot(x, y2, "r-", label='$y_2 = x^3$')

# Add labels to the axes
plt.xlabel("X - Axis")
plt.ylabel("Y - Axis")

# Add legend to the plot
plt.legend()

# Adjust layout for better appearance
plt.tight_layout()

# Display the plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Generate x values
x = np.linspace(0, 10, 2000)

# Create a figure with a specified size
plt.figure(figsize=(10, 6))

# Plot the sine function and add legend
plt.plot(x, np.sin(x), label='$\sin(x)$')

# Plot the cosine function and add legend
plt.plot(x, np.cos(x), label='$\cos(x)$')

# Add labels to the axes
plt.xlabel(r'$X$', fontsize=18)
plt.ylabel(r'$Y$', fontsize=18)

# Add a title to the plot
plt.title("$\sin(x)$ & $\cos(x)$", fontsize=14)

# Add legend to the plot at the upper right position
plt.legend(loc='upper right')

# Display the plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Generate x values
x = np.array([1, 2, 3, 4, 5, 6])

# Create a figure with a specified size
plt.figure(figsize=(10, 5))

# Plot the function y = x^2 with a solid blue line and add legend
plt.plot(x, np.power(x, 2), "b-", label='$y = x^2$')

# Plot the function y = x^3 with a red dashed line and add legend
plt.plot(x, np.power(x, 3), color='red', linewidth=1.0, linestyle='--', label='$y = x^3$')

# Add labels to the axes
plt.xlabel("X - Axis")
plt.ylabel("Y - Axis")

# Add legend to the plot at the upper center position with larger font size
plt.legend(loc='upper center', fontsize='large')

# Display the plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Generate x values
x = np.linspace(0, 10, 2000)

# Create a figure with a specified size
plt.figure(figsize=(16, 9))

# Plot sine function with dashed line style and add legend
plt.plot(x, np.sin(x), label='$Sin(X) $ $ Dashed $', linestyle='dashed')

# Plot sine function with dashdot line style and add legend
plt.plot(x + 1, np.sin(x), label='$Sin(X) $ $ Dashdot $', linestyle='dashdot')

# Plot cosine function with solid line style and add legend
plt.plot(x, np.cos(x), label='$cos(X) $ $ Solid $', linestyle='solid')

# Plot cosine function with dotted line style and add legend
plt.plot(x + 1, np.cos(x), label='$cos(X)$ $ Dotted $', linestyle='dotted')

# Add labels to the axes
plt.xlabel(r'$X$', fontsize=18)
plt.ylabel(r'$Y$', fontsize=18)

# Add title to the plot
plt.title("$Sin(x) $ $ & $ $ Cos(x)$", fontsize=14)

# Add legend to the plot at the upper right position with adjusted location
plt.legend(loc='upper right', fontsize=14, bbox_to_anchor=(1.2, 1.0))

# Display the plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Generate x values
x = np.linspace(0, 10, 2000)

# Create a figure with a specified size
plt.figure(figsize=(16, 9))

# Plot sine function with dashed line style and add legend
plt.plot(x, np.sin(x), label='$Sin(X) $ $ Dashed $', linestyle='--')

# Plot sine function with dashdot line style and add legend
plt.plot(x + 1, np.sin(x), label='$Sin(X) $ $ Dashdot $', linestyle='-.')

# Plot cosine function with solid line style and add legend
plt.plot(x, np.cos(x), label='$cos(X) $ $ Solid $', linestyle='-')

# Plot cosine function with dotted line style and add legend
plt.plot(x + 1, np.cos(x), label='$cos(X)$ $ Dotted $', linestyle=':')

# Add labels to the axes
plt.xlabel(r'$X$', fontsize=18)
plt.ylabel(r'$Y$', fontsize=18)

# Add title to the plot
plt.title("$Sin(x) $ $ & $ $ Cos(x)$", fontsize=14)

# Add legend to the plot at the upper right position with adjusted location
plt.legend(loc='upper right', fontsize=14, bbox_to_anchor=(1.2, 1.0))

# Display the plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Generate x values
x = np.linspace(0, 10, 2000)

# Create a figure with a specified size
plt.figure(figsize=(10, 6))

# Plot sine function and add legend
plt.plot(x, np.sin(x), label='$Sin(X)$')

# Plot cosine function and add legend
plt.plot(x, np.cos(x), label='$cos(X)$')

# Fill the region under the sine curve with shading
plt.fill_between(x, 0, np.sin(x), color='skyblue', alpha=0.4, label='Shaded Area under Sin(X)')

# Fill the region under the cosine curve with shading
plt.fill_between(x, 0, np.cos(x), color='lightcoral', alpha=0.4, label='Shaded Area under Cos(X)')

# Add labels to the axes
plt.xlabel(r'$X$', fontsize=18)
plt.ylabel(r'$Y$', fontsize=18)

# Add title to the plot
plt.title("$Sin(x) $ $ & $ $ Cos(x)$", fontsize=14)

# Add legend to the plot at the lower left position
plt.legend(loc='lower left')

# Display the plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Create an array of x values
x = np.array([1, 2, 3, 4, 5, 6])

# Calculate y values for y1 and y2
y1 = np.power(x, 2)
y2 = np.power(x, 3)

# Plot the curve for y1 with blue solid line and label
plt.plot(x, y1, "b-", label='$y1 = x^2$')

# Plot the curve for y2 with red solid line and label
plt.plot(x, y2, "r-", label='$y2 = x^3$')

# Set labels for x and y axes
plt.xlabel("X - Axis")
plt.ylabel("Y - Axis")

# Add legend to the plot at the upper center position with increased font size
plt.legend(loc='upper center', fontsize='large')

# Display the plot
plt.show()

import matplotlib.pyplot as plt

# Data for the plot
x = [1, 2, 3, 4, 5, 6, 7, 8, 9]
y = [7, 8, 9, 10, 7, 11, 12, 13, 14]
y2 = [7, 7, 7, 7, 7, 7, 7, 7, 7]

# Plotting two lines with different line widths and labels
plt.plot(x, y, linewidth=4, label='Line - 1')  # Line 1 with linewidth 4
plt.plot(x, y2, linewidth=3, label='Line - 2')  # Line 2 with linewidth 3

# Adding labels and title to the plot
plt.xlabel('X Axis Label')
plt.ylabel('Y Axis Label')
plt.title('Line Graph')

# Adding legend to the plot
plt.legend()

# Display the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Data for the plot
x = [1, 2, 3, 4, 5, 6, 7, 8, 9]
y = [7, 8, 9, 10, 7, 11, 12, 13, 14]
y2 = [7, 7, 7, 7, 7, 7, 7, 7, 7]

# Plotting two lines with different line widths and labels
plt.plot(x, y, linewidth=4, label='Line - 1')  # Line 1 with linewidth 4
plt.plot(x, y2, linewidth=3, label='Line - 2')  # Line 2 with linewidth 3

# Adding labels and title to the plot
plt.xlabel('X Axis Label')
plt.ylabel('Y Axis Label')
plt.title('Line Graph')

# Adding legend to the plot
plt.legend()

# Adding grid lines to the plot
plt.grid(b=True, linestyle='-', which='major', color='grey')

# Display the plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Data for the plot
x = np.array([1, 2, 3, 4, 5, 6])
y1 = np.power(x, 2)
y2 = np.power(x, 3)

# Setting the figure size
plt.figure(figsize=(12, 5))

# Setting the background color using Hex code
ax = plt.axes()
ax.set_facecolor("darkgrey")

# Plotting two lines with blue circles and red circles
plt.plot(x, y1, "bo-", label='$y = x^2$')
plt.plot(x, y2, "ro-", label='$y = x^3$')

# Adding labels and legend to the plot
plt.xlabel("X - Axis")
plt.ylabel("Y - Axis")
plt.legend()

# Display the plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Data for the plots
x = np.linspace(0, 10, 100)
y1 = np.sin(x)  # Sine Graph
y2 = np.cos(x)  # Cosine Graph

# Create a figure with 1 row and 2 columns
plt.figure(figsize=(14, 6))

# Plot the sine graph in the first subplot
plt.subplot(1, 2, 1)
plt.plot(x, y1)
plt.title('Sine Graph')

# Plot the cosine graph in the second subplot
plt.subplot(1, 2, 2)
plt.plot(x, y2)
plt.title('Cosine Graph')

# Display the plots
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Data for the plots
x = np.linspace(0, 10, 100)
y1 = np.sin(x)  # Sine Graph
y2 = np.cos(x)  # Cosine Graph

# Create a figure with 2 rows and 1 column
plt.figure(figsize=(12, 6))

# Plot the sine graph in the first subplot (top)
plt.subplot(2, 1, 1)
plt.plot(x, y1, "b-")
plt.title('Sine Graph')

# Plot the cosine graph in the second subplot (bottom)
plt.subplot(2, 1, 2)
plt.plot(x, y2, "r-")
plt.title('Cosine Graph')

# Adjust layout for better spacing
plt.tight_layout()

# Display the plots
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Data for the plots
x = np.arange(-50, 50)
y1 = np.power(x, 2)
y2 = np.power(x, 3)
y3 = np.sin(x)
y4 = np.cos(x)
y5 = np.tan(x)
y6 = np.tanh(x)
y7 = np.sinh(x)
y8 = np.cosh(x)
y9 = np.exp(x)

# Create a 3x3 grid of subplots
fig1, ax1 = plt.subplots(nrows=3, ncols=3, figsize=(20, 20))

# Plotting functions in subplots
ax1[0, 0].plot(x, y1, "tab:blue")
ax1[0, 0].set_title("Square Function")
ax1[0, 0].set_xlabel(r'$X$', fontsize=18)
ax1[0, 0].set_ylabel(r'$Y$', fontsize=18)

ax1[0, 1].plot(x, y2, "tab:orange")
ax1[0, 1].set_title("Cubic Function")
ax1[0, 1].set_xlabel(r'$X$', fontsize=18)
ax1[0, 1].set_ylabel(r'$Y$', fontsize=18)

ax1[0, 2].plot(x, y3, "tab:green")
ax1[0, 2].set_title("Sine Function")
ax1[0, 2].set_xlabel(r'$X$', fontsize=18)
ax1[0, 2].set_ylabel(r'$Y$', fontsize=18)

ax1[1, 0].plot(x, y4, "b-")
ax1[1, 0].set_title("Cosine Function")
ax1[1, 0].set_xlabel(r'$X$', fontsize=18)
ax1[1, 0].set_ylabel(r'$Y$', fontsize=18)

ax1[1, 1].plot(x, y5, "r-")
ax1[1, 1].set_title("Tangent Function")
ax1[1, 1].set_xlabel(r'$X$', fontsize=18)
ax1[1, 1].set_ylabel(r'$Y$', fontsize=18)

ax1[1, 2].plot(x, y6, "g-")
ax1[1, 2].set_title("Hyperbolic Tangent")
ax1[1, 2].set_xlabel(r'$X$', fontsize=18)
ax1[1, 2].set_ylabel(r'$Y$', fontsize=18)

ax1[2, 0].plot(x, y7, "m-")
ax1[2, 0].set_title("Hyperbolic Sine")
ax1[2, 0].set_xlabel(r'$X$', fontsize=18)
ax1[2, 0].set_ylabel(r'$Y$', fontsize=18)

ax1[2, 1].plot(x, y8, "y-")
ax1[2, 1].set_title("Hyperbolic Cosine")
ax1[2, 1].set_xlabel(r'$X$', fontsize=18)
ax1[2, 1].set_ylabel(r'$Y$', fontsize=18)

ax1[2, 2].plot(x, y9, "k-")
ax1[2, 2].set_title("Exponential Function")
ax1[2, 2].set_xlabel(r'$X$', fontsize=18)
ax1[2, 2].set_ylabel(r'$Y$', fontsize=18)

# Adjust layout for better spacing
plt.tight_layout()

# Display the plots
plt.show()

import matplotlib.pyplot as plt

y = [[1, 2, 3, 4, 5], [10, 20, 30, 40, 50], [60, 70, 80, 90, 100]]
x1 = [10, 20, 30, 40, 50]

plt.figure(figsize=(10, 6))

for i, y_values in enumerate(y, start=1):
    print(f'Iteration Number: {i}')
    print(f'X1 Values: {x1}')
    print(f'Y Values (Iteration {i}): {y_values}')

    plt.plot(x1, y_values, label=f'Line {i}')

plt.xlabel('X Axis')
plt.ylabel('Y Axis')
plt.title('Multiple Line Plots')
plt.legend()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

id1 = np.arange(1, 10)
score = np.arange(20, 110, 10)

plt.bar(id1, score)
plt.xlabel('Student ID')
plt.ylabel('Score')
plt.title('Student Scores')
plt.show()

import numpy as np
import matplotlib.pyplot as plt

id1 = np.arange(1, 10)
score = np.arange(20, 110, 10)

# Setting the figure size
plt.figure(figsize=(8, 5))
ax = plt.axes()

# Setting the background color by specifying the HEX Code
ax.set_facecolor("#ECF0F1")

plt.bar(id1, score, color='#FFA726')
plt.xlabel(r'$Student$ $ID$')
plt.ylabel(r'$Score$')
plt.title('Student Scores')
plt.show()

import matplotlib.pyplot as plt

x1 = [1, 3, 5, 7]
x2 = [2, 4, 6, 8]
y1 = [7, 7, 7, 7]
y2 = [17, 18, 29, 40]

plt.figure(figsize=(8, 6))
ax = plt.axes()
ax.set_facecolor("white")
plt.bar(x1, y1, label="First", color='#42B300')
plt.bar(x2, y2, label="Second", color='#94E413')
plt.xlabel('$X$')
plt.ylabel('$Y$')
plt.title('$Bar$ $Chart$')
plt.legend()
plt.show()

import matplotlib.pyplot as plt

Age = [28, 33, 43, 45, 57]
Name = ["Asif", "Steve", 'John', "Ravi", "Basit"]

plt.barh(Name, Age, color="yellowgreen")
plt.xlabel('Age')
plt.ylabel('Name')
plt.title('Horizontal Bar Chart')
plt.show()

import matplotlib.pyplot as plt
import numpy as np

num1 = np.array([1, 3, 5, 7, 9])
num2 = np.array([2, 4, 6, 8, 10])

plt.figure(figsize=(8, 4))
plt.bar(num1, num1**2, width=0.2, color='#FF6F00', label='Set 1')
plt.bar(num2, num2**2, width=0.2, color='#FFB300', label='Set 2')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Bar Chart with Different Widths')
plt.legend()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

num1 = np.array([1, 3, 5, 7, 9])
num2 = np.array([2, 4, 6, 8, 10])

plt.figure(figsize=(10, 6))
plt.bar(num1, num1**2, width=0.3, color='#FF6F00')
plt.bar(num2, num2**2, width=0.3, color='#FFB300')

# Adding text annotations for the first set of bars (num1)
for x, y in zip(num1, num1**2):
    plt.text(x, y + 0.05, '%d' % y, ha='center', va='bottom')

# Adding text annotations for the second set of bars (num2)
for x, y in zip(num2, num2**2):
    plt.text(x, y + 0.05, '%d' % y, ha='center', va='bottom')

plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Bar Chart with Values Displayed on Top')
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Generate data
x = np.arange(1, 21)
y1 = np.random.uniform(0.1, 0.7, 20)
y2 = np.random.uniform(0.1, 0.7, 20)

# Create a bar plot
plt.figure(figsize=(16, 8))

# specify edgecolor by name
plt.bar(x, +y1, facecolor='#C0CA33', edgecolor='white')
plt.bar(x, -y2, facecolor='#FF9800', edgecolor='white')

# Add text annotations on top of the bars
for x_val, y_val in zip(x, y1):
    plt.text(x_val, y_val + 0.05, '%.2f' % y_val, ha='center', va='bottom', fontsize=10)

# Set plot limits
plt.xlim(0, 21)
plt.ylim(-1.25, +1.25)

# Display the plot
plt.show()

plt.style.use('seaborn-darkgrid')

x1 = ['Asif', 'Basit', 'Ravi', 'Minil']
y1 = [17, 18, 29, 40]
y2 = [20, 21, 22, 23]

plt.figure(figsize=(5, 7))

# Plotting the "Open Tickets" bars
plt.bar(x1, y1, label="Open Tickets", width=0.5, color='#FF6F00')

# Plotting the "Closed Tickets" bars on top of the "Open Tickets" bars
plt.bar(x1, y2, label="Closed Tickets", width=0.5, bottom=y1, color='#FFB300')

plt.xlabel('$X$')
plt.ylabel('$Y$')
plt.title('$Bar$ $Chart$')
plt.legend()
plt.show()

plt.style.use('seaborn-darkgrid')

x1 = ['Asif', 'Basit', 'Ravi', 'Minil']
y1 = np.array([17, 18, 29, 40])
y2 = np.array([20, 21, 22, 23])
y3 = np.array([5, 9, 11, 12])

plt.figure(figsize=(5, 7))

# Plotting the "Open Tickets" bars
plt.bar(x1, y1, label="Open Tickets", width=0.5, color='#FF6F00')

# Plotting the "Closed Tickets" bars on top of the "Open Tickets" bars
plt.bar(x1, y2, label="Closed Tickets", width=0.5, bottom=y1, color='#FFB300')

# Plotting the "Cancelled Tickets" bars on top of the "Closed Tickets" bars
plt.bar(x1, y3, label="Cancelled Tickets", width=0.5, bottom=y1 + y2, color='#F7DC6F')

plt.xlabel('$X$')
plt.ylabel('$Y$')
plt.title('$Bar$ $Chart$')
plt.legend()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

plt.figure(figsize=(7, 9))

# Set width of bar
barWidth = 0.25

# Set height of bar
y1 = np.array([17, 18, 29, 40])
y2 = np.array([20, 21, 22, 23])
y3 = np.array([5, 9, 11, 12])

# Set position of bar on X axis
pos1 = np.arange(len(y1))
pos2 = [x + barWidth for x in pos1]
pos3 = [x + barWidth for x in pos2]

# Make the plot
plt.bar(pos1, y1, color='#FBC02D', width=barWidth, label='Open')
plt.bar(pos2, y2, color='#F57F17', width=barWidth, label='Closed')
plt.bar(pos3, y3, color='#E65100', width=barWidth, label='Cancelled')

# Add xticks on the middle of the group bars
plt.xlabel('Assignee', fontweight='bold')
plt.ylabel('Number of Tickets', fontweight='bold')
plt.xticks([i + barWidth for i in range(len(y1))], ['Asif', 'Basit', 'Ravi', 'Minil'])

# Create legend & Show graphic
plt.legend()
plt.show()

plt.style.use('seaborn-darkgrid')
x1 = ['Asif', 'Basit', 'Ravi', 'Minil']
y1 = [17, 18, 29, 40]
y2 = [20, 21, 22, 23]

plt.figure(figsize=(8, 5))
plt.barh(x1, y1, label="Open Tickets", color='#FF6F00')
plt.barh(x1, y2, label="Closed Tickets", left=y1, color='#FFB300')
plt.xlabel('$X$')
plt.ylabel('$Y$')
plt.title('$Bar$ $Chart$')
plt.legend()
plt.show()

plt.style.use('seaborn-darkgrid')
x1 = ['Asif', 'Basit', 'Ravi', 'Minil']
y1 = [17, 18, 29, 40]
y2 = [20, 21, 22, 23]

plt.figure(figsize=(5, 7))
plt.bar(x1, y1, label="Open Tickets", width=0.5, color='#FF6F00')
plt.bar(x1, y2, label="Closed Tickets", width=0.5, bottom=y1, color='#FFB300')
plt.xlabel('$X$')
plt.ylabel('$Y$')
plt.title('$Bar$ $Chart$')

for x, y in zip(x1, y1):
    plt.text(x, y - 10, '%d' % y, ha='center', va='bottom')

for x, y, z in zip(x1, y2, y1):
    plt.text(x, y + z - 10, '%d' % y, ha='center', va='bottom')

plt.legend()
plt.show()

plt.style.use('seaborn-darkgrid')
x1 = ['Asif', 'Basit', 'Ravi', 'Minil']
y1 = [17, 18, 29, 40]
y2 = [20, 21, 22, 23]

plt.figure(figsize=(8, 5))
plt.barh(x1, y1, label="Open Tickets", color='#FF6F00')
plt.barh(x1, y2, label="Closed Tickets", left=y1, color='#FFB300')
plt.xlabel('$X$')
plt.ylabel('$Y$')

for x, y in zip(x1, y1):
    plt.text(y - 10, x, '%d' % y, ha='center', va='bottom')

for x, y, z in zip(x1, y2, y1):
    plt.text(y + z - 10, x, '%d' % y, ha='center', va='bottom')

plt.title('$Bar$ $Chart$')
plt.legend()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

plt.figure(figsize=(7, 9))

# set width of bar
barWidth = 0.25

# set height of bar
y1 = np.array([17, 18, 29, 40])
y2 = np.array([20, 21, 22, 23])
y3 = np.array([5, 9, 11, 12])

# Set position of bar on X axis
pos1 = np.arange(len(y1))
pos2 = [x + barWidth for x in pos1]
pos3 = [x + barWidth for x in pos2]

# Make the plot
plt.bar(pos1, y1, color='#FBC02D', width=barWidth, label='Open')
plt.bar(pos2, y2, color='#F57F17', width=barWidth, label='Closed')
plt.bar(pos3, y3, color='#E65100', width=barWidth, label='Cancelled')

# Add xticks on the middle of the group bars
plt.xlabel('Assignee', fontweight='bold')
plt.ylabel('Number of Tickets', fontweight='bold')
plt.xticks([i + barWidth for i in range(len(y1))], ['Asif', 'Basit', 'Ravi', 'Minil'])

# Add values on top of the bars
for x, y in zip(pos1, y1):
    plt.text(x, y, '%d' % y, ha='center', va='bottom')

for x, y in zip(pos2, y2):
    plt.text(x, y, '%d' % y, ha='center', va='bottom')

for x, y in zip(pos3, y3):
    plt.text(x, y, '%d' % y, ha='center', va='bottom')

plt.title('$Grouped$ $Bar$ $Chart$')

# Create legend & Show graphic
plt.legend()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Data for Scatter Plot - 1
x1 = np.array([250, 150, 350, 252, 450, 550, 455, 358, 158, 355])
y1 = np.array([40, 50, 80, 90, 100, 50, 60, 88, 54, 45])

# Data for Scatter Plot - 2
x2 = np.array([200, 100, 300, 220, 400, 500, 450, 380, 180, 350])
y2 = np.array([400, 500, 800, 900, 1000, 500, 600, 808, 504, 405])

# Scatter Plot - 1
plt.scatter(x1, y1)
plt.xlabel('$Time$ $Spent$', fontsize=12)
plt.ylabel('$Score$', fontsize=12)
plt.title('Scatter Graph - 1')
plt.show()

# Scatter Plot - 2
plt.scatter(x2, y2, color='r')
plt.xlabel('$Time$ $Spent$', fontsize=12)
plt.ylabel('$Score$', fontsize=12)
plt.title('Scatter Graph - 2')
plt.show()

# Scatter Plot - 3
plt.scatter(x1, y1, label='Class 1')
plt.scatter(x2, y2, label='Class 2', color='r')
plt.xlabel('$Time$ $Spent$', fontsize=12)
plt.ylabel('$Score$', fontsize=12)
plt.title('Scatter Graph - 3')
plt.legend()
plt.show()

# Scatter Plot - 4
plt.scatter(x1, y1, label='Class 1', marker='o', color='m')
plt.scatter(x2, y2, label='Class 2', marker='v', color='r')
plt.xlabel('$Time$ $Spent$', fontsize=12)
plt.ylabel('$Score$', fontsize=12)
plt.title('Scatter Graph - 4')
plt.legend()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Generate random data
x = np.random.normal(0, 10, 1000)
y = np.random.normal(0, 10, 1000)

# Create a scatter plot
plt.figure(figsize=(10, 6))
plt.scatter(x, y)

# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np

plt.figure(figsize=(8, 6))

# Scatter plot with red points, size 50, and alpha 0.6
plt.scatter(np.random.random(10), np.random.random(10), c='r', s=50, alpha=0.6, label='One')

# Scatter plot with blue points, size 100, and alpha 0.6
plt.scatter(np.random.random(10), np.random.random(10), c='b', s=100, alpha=0.6, label='Two')

# Scatter plot with green points, size 150, and alpha 0.6
plt.scatter(np.random.random(10), np.random.random(10), c='g', s=150, alpha=0.6, label='Three')

# Scatter plot with yellow points, size 200, and alpha 0.6
plt.scatter(np.random.random(10), np.random.random(10), c='y', s=200, alpha=0.6, label='Four')

# Add legend with custom positioning and shadow
plt.legend(bbox_to_anchor=(1.0, 1.0), shadow=True, fontsize='x-large')

# Show the plot
plt.show()

import matplotlib.pyplot as plt
import numpy as np

plt.figure(figsize=(8, 6))

# Scatter plots with different colors, sizes, and labels
plt.scatter(np.random.random(10), np.random.random(10), c='r', s=50, alpha=0.6, label='One')
plt.scatter(np.random.random(10), np.random.random(10), c='b', s=100, alpha=0.6, label='Two')
plt.scatter(np.random.random(10), np.random.random(10), c='g', s=150, alpha=0.6, label='Three')
plt.scatter(np.random.random(10), np.random.random(10), c='y', s=200, alpha=0.6, label='Four')

# Set the legend with custom label color
legend = plt.legend(bbox_to_anchor=(1.0, 1.0), shadow=True, fontsize='x-large', labelcolor='red')

# Show the plot
plt.show()

import matplotlib.pyplot as plt

# Data for the pie chart
area = [48, 30, 20, 15]
labels = ['Low', 'Medium', 'High', 'Critical']
colors = ['#8BC34A', '#D4E157', '#FFB300', '#FF7043']

# Create a pie chart
plt.figure(figsize=(9, 9))
plt.pie(area, labels=labels, colors=colors, startangle=45)

# Display the pie chart
plt.show()

import matplotlib.pyplot as plt

# Data for the pie chart
area = [48, 30, 20, 15]
labels = ['Low', 'Medium', 'High', 'Critical']
colors = ['#7CB342', '#C0CA33', '#FFB300', '#F57C00']
plt.figure(figsize=(8, 8))

# Display percentage in Pie Chart using autopct='%1.1f%%'
plt.pie(area, labels=labels, colors=colors, startangle=45, shadow=True, autopct='%1.1f%%')
plt.show()

import matplotlib.pyplot as plt

# Explode 4th Slice
plt.figure(figsize=(8,8))
area = [48, 30, 20, 15]
labels = ['Low', 'Medium', 'High', 'Critical']
colors = ['#7CB342', '#C0CA33', '#FFB300', '#F57C00']
# explode = [0,0,0,0.1] will explode the fourth slice
explode = [0, 0, 0, 0.1]
plt.pie(area, labels=labels, colors=colors, startangle=45, autopct='%1.1f%%', shadow=True, explode=explode)
plt.show()

import matplotlib.pyplot as plt

# Explode 3rd & 4th Slice
plt.figure(figsize=(8,8))
area = [48, 30, 20, 15]
labels = ['Low', 'Medium', 'High', 'Critical']
colors = ['#7CB342', '#C0CA33', '#FFB300', '#F57C00']
# explode = [0, 0, 0.1, 0.1] will explode the 3rd & 4th slice
explode = [0, 0, 0.1, 0.1]
plt.pie(area, labels=labels, colors=colors, startangle=45, autopct='%1.1f%%', shadow=True, explode=explode)
plt.legend()
plt.show()

import matplotlib.pyplot as plt

plt.figure(figsize=(9, 9))
area = [48, 30, 20, 15]
labels = ['Low', 'Medium', 'High', 'Critical']
colors = ['#8BC34A', '#D4E157', '#FFB300', '#FF7043']
plt.pie(area, labels=labels, colors=colors, startangle=45)

# Adding circle at the center
my_circle = plt.Circle((0, 0), 0.7, color='white')
plt.gcf().gca().add_artist(my_circle)

plt.show()

import matplotlib.pyplot as plt

fig = plt.figure(figsize=(9, 9))

# Changing background color of the donut chart
fig.patch.set_facecolor('#DADADA')
area = [48, 30, 20, 15]
labels = ['Low', 'Medium', 'High', 'Critical']
colors = ['#8BC34A', '#D4E157', '#FFB300', '#FF7043']
plt.pie(area, labels=labels, colors=colors, startangle=45)

# Adding circle at the center with the same background color
my_circle = plt.Circle((0, 0), 0.7, color='#DADADA')
plt.gcf().gca().add_artist(my_circle)

plt.show()

import matplotlib.pyplot as plt

plt.figure(figsize=(9, 9))
area = [48, 30, 20, 15]
labels = ['Low', 'Medium', 'High', 'Critical']
colors = ['#8BC34A', '#D4E157', '#FFB300', '#FF7043']

# Explode the 3rd and 4th slices
explode = [0, 0, 0.0, 0.1]
plt.pie(area, labels=labels, colors=colors, startangle=45, explode=explode, autopct='%1.1f%%')

# Adding a circle at the center
my_circle = plt.Circle((0, 0), 0.7, color='white')
plt.gcf().gca().add_artist(my_circle)
plt.show()

import matplotlib.pyplot as plt

plt.figure(figsize=(9, 9))
area = [48, 30, 20, 15]
labels = ['Low', 'Medium', 'High', 'Critical']
colors = ['#8BC34A', '#D4E157', '#FFB300', '#FF7043']

# Explode the 3rd and 4th slices
explode = [0, 0, 0.1, 0.1]
plt.pie(area, labels=labels, colors=colors, startangle=45, explode=explode)

# Adding a circle at the center
my_circle = plt.Circle((0, 0), 0.7, color='white')
p = plt.gcf()
p.gca().add_artist(my_circle)
plt.show()

import matplotlib.pyplot as plt

plt.figure(figsize=(9, 9))
area = [48, 30, 20, 15]
labels = ['Low', 'Medium', 'High', 'Critical']
colors = ['#8BC34A', '#D4E157', '#FFB300', '#FF7043']

# Corrected explode values
explode = [0.03, 0.03, 0.03, 0.1]
plt.pie(area, labels=labels, colors=colors, startangle=45, explode=explode)

# Adding a circle at the center
my_circle = plt.Circle((0, 0), 0.7, color='white')
p = plt.gcf()
p.gca().add_artist(my_circle)
plt.show()

import matplotlib.pyplot as plt

plt.figure(figsize=(9, 9))
area = [48, 30, 20, 15]
labels = ['Low', 'Medium', 'High', 'Critical']
colors = ['#8BC34A', '#D4E157', '#FFB300', '#FF7043']
plt.pie(area, labels=labels, colors=colors, startangle=45, autopct='%1.1f%%', explode=[0, 0, 0, 0], shadow=True)

 # Adding circle at the centre
my_circle = plt.Circle((0, 0), 0.7, color='white')
p = plt.gcf()
p.gca().add_artist(my_circle)
plt.show()

import matplotlib.pyplot as plt

plt.figure(figsize=(9, 9))
area = [48, 30, 20, 15]
labels = ['Low', 'Medium', 'High', 'Critical']
colors = ['#8BC34A', '#D4E157', '#FFB300', '#FF7043']
plt.pie(area, labels=labels, colors=colors, startangle=45, autopct='%1.1f%%', pctdistance=0.85, explode=[0.0, 0.0, 0.0, 0.0], shadow=True)

# Adding a circle at the center
my_circle = plt.Circle((0, 0), 0.7, color='white')
p = plt.gcf()
p.gca().add_artist(my_circle)
plt.show()

import matplotlib.pyplot as plt

plt.figure(figsize=(9,9))
area = [48 , 30 , 20 , 15]
total = np.sum(area)
def val_per(x):
 return '{:.2f}%\n({:.0f})'.format(x, total*x/100)
labels = ['Low' , 'Medium' , 'High' , 'Critical']
colors = ['#8BC34A','#D4E157','#FFB300','#FF7043']
plt.pie (area , labels= labels , colors= colors , startangle=45 , autopct=val_per,  pctdistance=0.85, explode=[0.0, 0.0, 0.0, 0.0], shadow=True)

 # Adding circle at the centre
my_circle=plt.Circle( (0,0), 0.7, color='white')
p=plt.gcf()
p.gca().add_artist(my_circle)
plt.show()

import matplotlib.pyplot as plt

fig = plt.figure(figsize=(20, 6))

area = [48, 30, 20, 15]
priority = ['Low', 'Medium', 'High', 'Critical']
status = ['Resolved', 'Cancelled', 'Pending', 'Assigned']
company = ['IBM', 'Microsoft', 'BMC', 'Apple']
colors = ['#8BC34A', '#D4E157', '#FFB300', '#FF7043']

# Plotting the first pie chart
plt.subplot(1, 3, 1)
plt.pie(area, labels=priority, colors=colors, startangle=45)
my_circle = plt.Circle((0, 0), 0.7, color='white')  # Adding circle at the centre
p = plt.gcf()
p.gca().add_artist(my_circle)

# Plotting the second pie chart
plt.subplot(1, 3, 2)
plt.pie(area, labels=status, colors=colors, startangle=45)
my_circle = plt.Circle((0, 0), 0.7, color='white')  # Adding circle at the centre
p = plt.gcf()
p.gca().add_artist(my_circle)

# Plotting the third pie chart
plt.subplot(1, 3, 3)
plt.pie(area, labels=company, colors=colors, startangle=45)
my_circle = plt.Circle((0, 0), 0.7, color='white')  # Adding circle at the centre
p = plt.gcf()
p.gca().add_artist(my_circle)

plt.show()

import matplotlib.pyplot as plt

fig = plt.figure(figsize=(20, 13))

area = [48, 30, 20, 15]
priority = ['Low', 'Medium', 'High', 'Critical']
status = ['Resolved', 'Cancelled', 'Pending', 'Assigned']
company = ['IBM', 'Microsoft', 'BMC', 'Apple']
colors = ['#8BC34A', '#D4E157', '#FFB300', '#FF7043']

# Subplot 1
plt.subplot(2, 3, 1)
plt.pie(area, labels=priority, colors=colors, startangle=45)
my_circle = plt.Circle((0, 0), 0.7, color='white')  # Adding circle at the centre
p = plt.gcf()
p.gca().add_artist(my_circle)

# Subplot 2
plt.subplot(2, 3, 2)
plt.pie(area, labels=status, colors=colors, startangle=45)
my_circle = plt.Circle((0, 0), 0.7, color='white')  # Adding circle at the centre
p = plt.gcf()
p.gca().add_artist(my_circle)

# Subplot 3
plt.subplot(2, 3, 3)
plt.pie(area, labels=company, colors=colors, startangle=45)
my_circle = plt.Circle((0, 0), 0.7, color='white')  # Adding circle at the centre
p = plt.gcf()
p.gca().add_artist(my_circle)

# Subplot 4
plt.subplot(2, 3, 4)
plt.pie(area, labels=priority, colors=colors, startangle=45)
my_circle = plt.Circle((0, 0), 0.7, color='white')  # Adding circle at the centre
p = plt.gcf()
p.gca().add_artist(my_circle)

# Subplot 5
plt.subplot(2, 3, 5)
plt.pie(area, labels=status, colors=colors, startangle=45)
my_circle = plt.Circle((0, 0), 0.7, color='white')  # Adding circle at the centre
p = plt.gcf()
p.gca().add_artist(my_circle)

# Subplot 6
plt.subplot(2, 3, 6)
plt.pie(area, labels=company, colors=colors, startangle=45)
my_circle = plt.Circle((0, 0), 0.7, color='white')  # Adding circle at the centre
p = plt.gcf()
p.gca().add_artist(my_circle)

plt.show()

import numpy as np
import matplotlib.pyplot as plt

x = np.random.normal(size=2000)

plt.hist(x, bins=40, color='yellowgreen')
plt.gca().set(title='Histogram', ylabel='Frequency')
plt.show()

import numpy as np
import matplotlib.pyplot as plt

x = np.random.rand(2000)

plt.hist(x, bins=30, color='#D4AC0D')
plt.gca().set(title='Histogram', ylabel='Frequency')
plt.show()

import numpy as np
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 8))

x = np.random.normal(size=2000)

plt.hist(x, bins=40, color='yellowgreen', edgecolor="#6A9662")
plt.gca().set(title='Histogram', ylabel='Frequency')
plt.show()

import numpy as np
import matplotlib.pyplot as plt

x = np.random.normal(size=2000)

# Histogram with 30 bins
plt.figure(figsize=(10, 8))
plt.hist(x, bins=30, color='yellowgreen', edgecolor="#6A9662")
plt.gca().set(title='Histogram (30 Bins)', ylabel='Frequency')
plt.show()

# Histogram with 20 bins
plt.figure(figsize=(10, 8))
plt.hist(x, bins=20, color='yellowgreen', edgecolor="#6A9662")
plt.gca().set(title='Histogram (20 Bins)', ylabel='Frequency')
plt.show()

# Histogram with 10 bins
plt.figure(figsize=(10, 8))
plt.hist(x, bins=10, color='yellowgreen', edgecolor="#6A9662")
plt.gca().set(title='Histogram (10 Bins)', ylabel='Frequency')
plt.show()

import numpy as np
import matplotlib.pyplot as plt

plt.figure(figsize=(8, 11))

# Generate random data
x = np.random.normal(-4, 1, size=800)
y = np.random.normal(0, 1.5, size=800)
z = np.random.normal(3.5, 1, size=800)

# Plot histograms
plt.hist(x, bins=30, color='yellowgreen', alpha=0.6, label='X')
plt.hist(y, bins=30, color='#FF8F00', alpha=0.6, label='Y')
plt.hist(z, bins=30, color='blue', alpha=0.6, label='Z')

plt.gca().set(title='Histogram', ylabel='Frequency')
plt.legend()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 8))
x = np.random.rand(2000)

# Plot histogram with cumulative distribution function
plt.hist(x, bins=30, color='#ffa41b', edgecolor="#639a67", cumulative=True, density=True)

plt.gca().set(title='Histogram with Cumulative Distribution Function', ylabel='Cumulative Probability')
plt.show()

import numpy as np
import matplotlib.pyplot as plt

x = np.arange(1, 31)
y = np.random.normal(10, 11, size=30)
y = np.square(y)

plt.figure(figsize=(16, 6))
plt.plot(x, y, label='Line Plot')
plt.fill_between(x, 0, y, alpha=0.2, label='Filled Area')  # Filling the area between y and 0

plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Line Plot with Filled Area')
plt.legend()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

x = np.arange(1, 31)
y = np.random.normal(10, 11, size=30)
y = np.square(y)

plt.figure(figsize=(16, 6))

# Filling the area with a custom color
plt.fill_between(x, y, color="#baf1a1", label='Filled Area')

# Plotting the line with custom color on edges
plt.plot(x, y, color='#7fcd91', label='Line Plot')

plt.title("Area Chart", fontsize=16)
plt.xlabel("X-axis", fontsize=14)
plt.ylabel("Y-axis", fontsize=14)
plt.legend()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

x = np.arange(1, 31)
y = np.random.normal(10, 11, size=30)
y = np.square(y)

plt.figure(figsize=(16, 6))

# Filling the area with a custom color and transparency
plt.fill_between(x, y, color="#C8D700", alpha=0.3, label='Filled Area')

# Plotting the line with custom color
plt.plot(x, y, color='#36BD00', label='Line Plot')

plt.title("Area Chart", fontsize=16)
plt.xlabel("X-axis", fontsize=14)
plt.ylabel("Y-axis", fontsize=14)
plt.legend()
plt.show()

import numpy as np
import matplotlib.pyplot as plt

x = np.arange(1, 51)
y = np.random.normal(1, 5, size=50)
y = np.square(y)

# Plot with bold line edges
plt.figure(figsize=(16, 6))
plt.fill_between(x, y, color="#5ac8fa", alpha=0.4)
plt.plot(x, y, color="blue", linewidth=2, alpha=0.6)  # Bold line on edges
plt.title("Area Chart", fontsize=16)
plt.xlabel("X-axis", fontsize=14)
plt.ylabel("Y-axis", fontsize=14)
plt.show()

# Plot with less strong line edges
plt.figure(figsize=(16, 6))
plt.fill_between(x, y, color="#5ac8fa", alpha=0.4)
plt.plot(x, y, color="blue", linewidth=0.8, alpha=0.2)  # Less strong line on edges
plt.title("Area Chart", fontsize=14)
plt.xlabel("X-axis", fontsize=14)
plt.ylabel("Y-axis", fontsize=14)
plt.show()

import matplotlib.pyplot as plt
import numpy as np

x = np.arange(1, 6)
y1 = np.array([1, 5, 9, 13, 17])
y2 = np.array([2, 6, 10, 14, 16])
y3 = np.array([3, 7, 11, 15, 19])
y4 = np.array([4, 8, 12, 16, 20])

plt.figure(figsize=(8, 6))
plt.stackplot(x, y1, y2, y3, y4, labels=['Y1', 'Y2', 'Y3', 'Y4'])
plt.legend(loc='upper left')
plt.show()

import matplotlib.pyplot as plt
import numpy as np

x = np.arange(1, 6)
y1 = [1, 5, 9, 13, 17]
y2 = [2, 6, 10, 14, 16]
y3 = [3, 7, 11, 15, 19]
y4 = [4, 8, 12, 16, 20]

plt.figure(figsize=(8, 6))
plt.stackplot(x, y1, y2, y3, y4, labels=['Y1', 'Y2', 'Y3', 'Y4'])
plt.legend(loc='upper left')
plt.show()

import matplotlib.pyplot as plt
import numpy as np

x = np.arange(1, 7)
y1 = [1, 5, 9, 3, 17, 1]
y2 = [2, 6, 10, 4, 16, 2]
y3 = [3, 7, 11, 5, 19, 1]
y4 = [4, 8, 12, 6, 20, 2]

plt.figure(figsize=(10, 6))
plt.stackplot(x, y1, y2, y3, y4, labels=['Y1', 'Y2', 'Y3', 'Y4'])
plt.legend(loc='upper left')
plt.show()

import matplotlib.pyplot as plt
import numpy as np

x = np.arange(1, 7)
y = [[1, 5, 9, 3, 17, 1], [2, 6, 10, 4, 16, 2], [3, 7, 11, 5, 19, 1], [4, 8, 12, 6, 20, 2]]

plt.figure(figsize=(11, 6))
plt.stackplot(x, y, labels=['Y1', 'Y2', 'Y3', 'Y4'], colors=["#00b159", "#ffc425", "#f37735"])
plt.legend(loc='upper left')
plt.show()

plt.figure(figsize=(11, 6))
plt.stackplot(x, y, labels=['Y1', 'Y2', 'Y3', 'Y4'], colors=["#00b159", "#ffc425", "#f37735"])
plt.legend(loc='upper left')
plt.show()

plt.figure(figsize=(11, 6))
plt.stackplot(x, y, labels=['Y1', 'Y2', 'Y3', 'Y4'], colors=["#00b159", "#ffc425", "#f37735"])
plt.legend(loc='upper left')
plt.show()